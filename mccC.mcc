#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <math.h>
#include <setjmp.h>
#include <time.h>
#include <dlfcn.h>
#include <unistd.h>
#include <sys/mman.h>
#include <sys/file.h>
#include <fcntl.h>

#include "mcc.h"

expptr casecode1(expptr,expptr,expptr);
expptr casecode1a(expptr,expptr,expptr,expptr);
expptr casecode2(expptr,expptr,expptr);
void case_error(expptr);
expptr constructor_code(char c);

umacro{
  ucase{expptr e}{
    ucase{e;
      {ucase{!topexp;!rules}}:{
	expptr donelabel = gensym(`done);
	expptr topvar = gensym(`top);
	return `{
	  expptr $topvar = $topexp;
	  $casecode1(rules, topvar, donelabel)
	    $donelabel: ;}}}
    return NULL;}} //avoids compiler warning

expptr casecode1(expptr rules, expptr topvar, expptr donelabel){
  if(rules == NULL)return `{case_error($topvar);};
  ucase{rules;
    {!rule1 !rest}:{return casecode1a(rule1,topvar,donelabel,casecode1(rest,topvar,donelabel));}
    {!rule}:{return casecode1a(rule,topvar,donelabel,`{case_error($topvar);});}}
  return NULL; //avoids compiler warning
}

expptr casecode1a(expptr rule, expptr topvar, expptr donelabel, expptr elseform){
  ucase{rule;
    {{!pattern}:{!body}}:{
      return `{
	$casecode2(pattern, topvar, `{$body goto $donelabel ;});
	$elseform};}}
  return NULL; //avoids compiler wanting
}

expptr casecode2(expptr pattern, expptr valvar, expptr body){
  if(pattern == NULL)return `{if($valvar == NULL){$body}};
  char c = constructor(pattern);
 
  if(c == '!'){
    expptr var = arg1(pattern);
    if(symbolp(var)){
      return `{expptr $var = $valvar; $body};}
    if(constructor(var) == 'A'){
      expptr arglist = gensym(`arglist);
      return `{
	if($valvar != NULL && constructor($valvar) == 'A'){
	  expptr $arg1(var) = arg1($valvar);
	  expptr $arglist = arg2($valvar);
	  $casecode2(arg2(var),arglist,body)}};}
    berror("illegal variable in ucase");}
  
  if(c == 'a' || c == 'o' || string_quotep(c)){
    return `{if($valvar == $quote_code(pattern)){$body}};}
  
  expptr left = gensym(`leftval);
  expptr right = gensym(`rightval);
  return `{
    if($valvar != NULL && constructor($valvar) == $constructor_code(c)){
      expptr $left = arg1($valvar);
      expptr $right = arg2($valvar);
      $casecode2(arg1(pattern),left,casecode2(arg2(pattern),right,body))}};
}

void case_error(expptr topexp){
  fprintf(stderr,"unrecognized expression:\n");
  pprint(topexp,stderr,0);
  berror("ucase fall-through");
}

initfun(mccC_init)
